# Nome do workflow que aparecerá no GitHub Actions
name: CI Tests - Maven Selenium

# Eventos que irão disparar este workflow
on:
  push:
    branches:
      - main  # Roda quando houver push para a branch main
  pull_request:
    branches:
      - main  # Roda quando um pull request é aberto ou atualizado para a branch main
  workflow_dispatch: # Permite disparar o workflow manualmente pela UI do GitHub

jobs:
  build-and-test:
    # Nome do job
    name: Build and Run Tests
    # Tipo de runner (máquina virtual) onde o job será executado
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout do código do repositório
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Configurar o JDK
      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven # Habilita cache do Maven para builds mais rápidos

      # Step 3: Configurar o Google Chrome (necessário para testes Selenium)
      - name: Setup Google Chrome
        uses: browser-actions/setup-chrome@latest # Usa uma action para instalar o Chrome
        with:
          chrome-version: stable # Instala a versão estável do Chrome

      # Step 4: Instalar dependências e rodar os testes Maven
      - name: Run Maven Tests
        run: mvn clean install -Dtest=tests.register.RegisterUserTest,tests.login.LoginTest -B # -B para modo batch, que é mais adequado para CI

      # Opcional: Publicar relatórios de teste se houver
      # Se você tiver um relatório JUnit gerado em target/surefire-reports/, pode publicá-lo
      # - name: Publish Test Results
      #   uses: actions/upload-artifact@v4
      #   if: always() # Sempre executa, mesmo que os testes falhem
      #   with:
      #     name: test-results
      #     path: target/surefire-reports/